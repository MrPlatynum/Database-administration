# Министерство науки и высшего образования Российской Федерации

**Федеральное государственное автономное образовательное учреждение  
высшего образования  
«СЕВЕРО-КАВКАЗСКИЙ ФЕДЕРАЛЬНЫЙ УНИВЕРСИТЕТ»**

*Институт перспективной инженерии  
Департамент цифровых, робототехнических систем и электроники  
Межинститутская базовая кафедра*

---

## Отчет по лабораторной работе №2  
### дисциплины "Администрирование баз данных"

**Выполнил:** Душин Александр Владимирович  
4 курс, группа ПИЖ-б-о-22-1  
09.03.04 "Программная инженерия"  
направленность (профиль) "Разработка и сопровождение программного обеспечения"  
очная форма обучения  

**Руководитель практики:** Щеголев Алексей Алексеевич  
старший преподаватель департамента цифровых, робототехнических систем и электроники института перспективной инженерии

---

## Тема работы
Организация данных и системный каталог

## Цель работы
Всестороннее изучение логической и физической структуры хранения данных в PostgreSQL. Получение практических навыков управления базами данных, схемами, табличными пространствами. Глубокое освоение работы с системным каталогом для извлечения метаинформации. Исследование низкоуровневых аспектов хранения, включая TOAST.

---

## Ход выполнения работы

### Модуль 1. Базы данных и схемы

#### 1. Создание и проверка БД
Создана новая база данных `lab02_db`. Проверен ее начальный размер с помощью `pg_database_size('lab02_db')`. (Рис.1)

![Создание и проверка БД](./images/lab2-1.png)  
*Рисунок 1 – Создание и проверка БД*

#### 2. Работа со схемами
Выполнено подключение к `lab02_db`. Созданы две схемы: `app` и схема с именем пользователя ОС (`student`). В каждой схеме создана таблица и вставлены данные. (Рис.2)

![Работа со схемами](./images/lab2-2.png)  
*Рисунок 2 – Работа со схемами*

#### 3. Контроль размера
Повторно проверен размер базы данных. (Рис.3)

![Контроль размера](./images/lab2-3.png)  
*Рисунок 3 – Контроль размера*

Размер БД увеличился незначительно из-за создания новых схем, таблиц и добавления данных. Основное увеличение связано с созданием файлов для таблиц и их метаданных в системном каталоге, а не с объемом пользовательских данных.

#### 4. Управление путем поиска
Настроен параметр `search_path` для текущего сеанса так, чтобы при обращении по неполному имени приоритет имела пользовательская схема, а затем схема `app`. Продемонстрирована работа с таблицами без указания схемы. (Рис.4)

![Управление путем поиска](./images/lab2-4.png)  
*Рисунок 4 – Управление путем поиска*

#### 5. Настройка параметра БД (Практика+)
Для базы `lab02_db` установлено значение параметра `temp_buffers` в 4 раза больше значения по умолчанию. Проверена работа в новом сеансе. (Рис.5)

![Настройка параметра БД temp_buffers](./images/lab2-5.png)  
*Рисунок 5 – Настройка параметра БД temp_buffers*

---

### Модуль 2. Системный каталог

#### 1. Исследование pg_class
Получено описание системной таблицы `pg_class` с помощью команды `\d pg_class`. (Рис.6)

![Исследование pg_class](./images/lab2-6.png)  
*Рисунок 6 – Исследование pg_class*

#### 2. Исследование pg_tables
Получено подробное описание представления `pg_tables` с помощью команды `\d+ pg_tables`. (Рис.7)

![Исследование pg_tables](./images/lab2-7.png)  
*Рисунок 7 – Исследование pg_tables*

**Разница между таблицей и представлением:**  
Таблица — физический объект, хранящий данные на диске. Представление — виртуальный объект, определяемый запросом к одной или нескольким таблицам. `pg_tables` — это представление, которое показывает удобный вид данных из системных таблиц `pg_class` и `pg_namespace`.

#### 3. Временная таблица и список схем
В базе `lab02_db` создана временная таблица. Получен полный список всех схем в БД, включая системные (`pg_catalog`, `information_schema`). (Рис.8)

![Временная таблица и список схем](./images/lab2-8.png)  
*Рисунок 8 – Временная таблица и список схем*

Временная схема создается автоматически для хранения временных объектов текущего сеанса. Она имеет уникальное имя вида `pg_temp_X` и удаляется при завершении сеанса.

#### 4. Представления information_schema
Получен список всех представлений в схеме `information_schema`. (Рис.9)

```sql
SELECT table_name 
FROM information_schema.views 
WHERE table_schema = 'information_schema' 
ORDER BY table_name;
```

![Представления information_schema](./images/lab2-9.png)  
*Рисунок 9 – Представления information_schema*

#### 5. Анализ метакоманды
Выполнена команда `\d+ pg_views` в psql. Изучен вывод. (Рис.10)

![Анализ метакоманды](./images/lab2-10.png)  
*Рисунок 10 – Анализ метакоманды*

Команда `\d+` выполняет запросы к системным таблицам `pg_class`, `pg_namespace`, `pg_description` для получения информации об объекте. Для представлений дополнительно запрашивается определение из `pg_rewrite`.

---

### Модуль 3. Табличные пространства

#### 1. Создание Tablespace
Создан каталог в файловой системе `/home/student/mytablespace`. Создано новое табличное пространство `lab02_ts`, указывающее на этот каталог. (Рис.11)

![Создание Tablespace](./images/lab2-11.png)  
*Рисунок 11 – Создание Tablespace*

#### 2. Tablespace по умолчанию
Изменено табличное пространство по умолчанию для базы данных `template1` на `lab02_ts`. (Рис.12)

![Tablespace по умолчанию](./images/lab2-12.png)  
*Рисунок 12 – Tablespace по умолчанию*

`template1` используется как шаблон для создания новых БД. Изменив её табличное пространство по умолчанию, все новые БД будут наследовать это свойство.

#### 3. Наследование свойства
Создана новая база данных `lab02_db_new`. Проверено ее табличное пространство по умолчанию. (Рис.13)

![Наследование свойства](./images/lab2-13.png)  
*Рисунок 13 – Наследование свойства*

Новая БД унаследовала табличное пространство `lab02_ts` от `template1`, что подтверждает механизм наследования свойств от шаблонной БД.

#### 4. Символическая ссылка
Найдена в каталоге `PGDATA/pg_tblspc/` символьная ссылка, соответствующая `lab02_ts`. (Рис.14)

![Символическая ссылка](./images/lab2-14.png)  
*Рисунок 14 – Символическая ссылка*

Ссылка указывает на реальный каталог файловой системы, где хранятся файлы данных.

#### 5. Удаление Tablespace
Выполнена попытка удаления табличного пространства `lab02_ts`. (Рис.15)

![Удаление Tablespace](./images/lab2-15.png)  
*Рисунок 15 – Удаление Tablespace*

В PostgreSQL оператор `DROP TABLESPACE` не поддерживает `CASCADE`. Опция `CASCADE` требуется, потому что табличное пространство используется БД `template1` и `lab02_db_new`. Без `CASCADE` PostgreSQL откажется удалять используемое табличное пространство.

#### 6. Параметр Tablespace (Практика+)
Установлен параметр `random_page_cost` в значение 1.1 для табличного пространства `pg_default`. (Рис.16-17)

![Изменение параметра random_page_cost](./images/lab2-16.png)  
*Рисунок 16 – Изменение параметра random_page_cost*

![Проверка изменений](./images/lab2-17.png)  
*Рисунок 17 – Проверка изменений*

---

### Модуль 4. Низкий уровень

#### 1. Нежурналируемая таблица
Создана нежурналируемая таблица в пользовательском табличном пространстве (создано временное для задания). Удалено табличное пространство. (Рис.18-20)

![](./images/lab2-18.png)  
*Рисунок 18 – Создание нежурналируемой таблицы*

![](./images/lab2-19.png)  
*Рисунок 19 – Поиск файла с суффиксом _init*

![](./images/lab2-20.png)  
*Рисунок 20 – Удаление созданного табличного пространства*

Нежурналируемые таблицы не записываются в WAL, что повышает производительность, но делает их уязвимыми к сбоям. Файл `_init` используется для восстановления таблицы в пустое состояние после сбоя сервера.

#### 2. Стратегии хранения TOAST
Создана таблица со столбцом типа `text`. Определена стратегия хранения по умолчанию. Изменена стратегия на `external`. Вставлены короткая (менее 2 КБ) и длинная (более 2 КБ) строки. (Рис.21-22)

![](./images/lab2-21.png)  
*Рисунок 21 – Создание таблицы, определение стратегии и ввод данных*

![](./images/lab2-22.png)  
*Рисунок 22 – Проверка TOAST-таблицы*

Короткая строка остается в основной таблице. Длинная строка (>2KB) помещается в TOAST-таблицу и разбивается на чанки. Стратегия external означает, что большие значения всегда выносятся в TOAST без сжатия.

#### 3. Анализ размера БД (Практика+)
Сравнен размер базы `lab02_db`, возвращаемый `pg_database_size`, с суммой размеров всех пользовательских таблиц. (Рис.23)

![Анализ размера БД](./images/lab2-23.png)  
*Рисунок 23 – Сравнение размеров базы данных и таблиц*

**Объяснение расхождения:** Размер базы данных включает не только пользовательские таблицы, но и системный каталог, индексы системных таблиц, файлы visibility map, free space map, временные файлы и служебные структуры. Поэтому размер БД всегда больше суммы размеров пользовательских таблиц.

#### 4. Методы сжатия TOAST (Практика+)
Проверено средствами SQL, был ли PostgreSQL скомпилирован с поддержкой методов сжатия `pglz` и `lz4`. (Рис.24)

```sql
SELECT name, setting FROM pg_settings WHERE name IN ('default_toast_compression');
SHOW default_toast_compression;
```

![Проверка методов сжатия](./images/lab2-24.png)  
*Рисунок 24 – Доступные методы сжатия TOAST*

PostgreSQL поддерживает метод сжатия `pglz` по умолчанию. Поддержка `lz4` зависит от параметров компиляции (флаг `--with-lz4`).

#### 5. Сравнение сжатия (Практика+)
Создан текстовый файл размером более 10 МБ. Содержимое файла загружено в три таблицы с различными стратегиями хранения: без сжатия (`external`), со сжатием `pglz` и `lz4`. Сравнены размеры таблиц и время загрузки. (Рис.25-28)

![Загрузка данных с разным сжатием](./images/lab2-25.png)  
*Рисунок 25 – Создание текстового файла*

![Сравнение размеров и времени](./images/lab2-26.png)  
*Рисунок 26 – Загрузка без сжатия*

![Сравнение размеров и времени](./images/lab2-27.png)  
*Рисунок 27 – Сжатие с помощью pglz*

![Сравнение размеров и времени](./images/lab2-28.png)  
*Рисунок 28 – Сжатие с помощью lz4*

**Результаты:**
- **External (без сжатия):** максимальный размер, минимальное время загрузки
- **PGLZ:** средняя степень сжатия, среднее время загрузки
- **LZ4:** лучшее соотношение скорости и степени сжатия (если поддерживается)

---

## Выводы

В ходе выполнения лабораторной работы были изучены логическая и физическая структуры хранения данных в PostgreSQL. Получены практические навыки управления базами данных, схемами, табличными пространствами. Освоены работы с системным каталогом для извлечения метаинформации. Исследованы низкоуровневые аспекты хранения, включая TOAST.