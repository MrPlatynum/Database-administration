# Министерство науки и высшего образования Российской Федерации

**Федеральное государственное автономное образовательное учреждение  
высшего образования  
«СЕВЕРО-КАВКАЗСКИЙ ФЕДЕРАЛЬНЫЙ УНИВЕРСИТЕТ»**

*Институт перспективной инженерии  
Департамент цифровых, робототехнических систем и электроники  
Межинститутская базовая кафедра*

---

## Отчет по лабораторной работе №0  
### дисциплины "Администрирование баз данных"

**Выполнил:** Душин Александр Владимирович  
4 курс, группа ПИЖ-б-о-22-1  
09.03.04 "Программная инженерия"  
направленность (профиль) "Разработка и сопровождение программного обеспечения"  
очная форма обучения  

**Руководитель практики:** Щеголев Алексей Алексеевич  
старший преподаватель департамента цифровых, робототехнических систем и электроники института перспективной инженерии

---

## Тема работы
Установка PostgreSQL и базовое управление сервером

## Цель работы
Освоить основные способы установки PostgreSQL (из пакетов и исходных кодов) в предустановленном окружении. Получить практические навыки создания кластера баз данных, запуска и остановки сервера, а также проверки его состояния. Научиться использовать утилиты `initdb`, `pg_ctl`, `pg_checksums` и `psql` для базового взаимодействия с СУБД.

---

## Ход выполнения работы

### Часть 1. Установка из пакетов (Ubuntu) и управление кластером

#### 1. Установка PostgreSQL 16 из официальных пакетов
Установлен PostgreSQL 16 с помощью пакетного менеджера `apt`. (Рис.1)

![Установка образа с PostgreSQL](./images/lab1-1.png)  
*Рисунок 1 – Установка образа с PostgreSQL*

#### 2. Проверка кластера
Пакетный менеджер автоматически создал кластер `main`. Его состояние проверено с помощью команды `pg_lsclusters`. (Рис.2)

![Проверка статуса кластера](./images/lab1-2.png)  
*Рисунок 2 – Проверка статуса с помощью pg_lsclusters*

#### 3. Включение контрольных сумм
Кластер остановлен, выполнена проверка состояния контрольных сумм (`pg_checksums --check`). Далее включен расчет контрольных сумм (`pg_checksums --enable`), после чего кластер снова запущен. (Рис.3)

![Включение контрольных сумм](./images/lab1-3.png)  
*Рисунок 3 – Включение контрольных сумм*

#### 4. Управление сервером
С помощью утилиты `pg_ctlcluster` выполнены остановка, запуск и перезапуск кластера. После каждой операции проверялся статус. (Рис.4)

![Управление сервером](./images/lab1-4.png)  
*Рисунок 4 – Отработка управления сервером*

#### 5. Подключение и выполнение запроса
Выполнено подключение к кластеру через `psql` от имени пользователя `postgres`. Выполнен тестовый запрос `SELECT version();`. (Рис.5)

![Выполнение простого запроса](./images/lab1-5.png)  
*Рисунок 5 – Выполнение простого запроса*

---

### Часть 2. Установка из исходных кодов

#### 1. Подготовка инструментов для сборки
Установлены необходимые инструменты: `gcc`, `make`, `libreadline-dev` и другие. (Рис.6)

![Установка инструментов для сборки](./images/lab1-6.png)  
*Рисунок 6 – Установка инструментов для сборки*

#### 2. Сборка и установка PostgreSQL
Скачан архив с исходными кодами PostgreSQL 16. Архив распакован, сборка сконфигурирована с указанием каталога установки (`--prefix`) и нестандартного порта (`--with-pgport=5433`). Далее выполнены команды `make` и `make install`. (Рис.7-8)

```bash
tar -xf postgresql-16.9.tar.gz
cd postgresql-16.9
./configure --prefix="$HOME/pg16custom" --with-pgport=5433
make
make install
```

![Архив PostgreSQL](./images/lab1-7.png)  
*Рисунок 7 – Архив PostgreSQL*

![Распаковка, конфигурация и установка](./images/lab1-8.png)  
*Рисунок 8 – Распаковка, конфигурация и установка*

#### 3. Создание нового кластера
Создан каталог для данных (`PGDATA`). Инициализирован новый кластер БД с указанием суперпользователя `postgres` и включением контрольных сумм. (Рис.9)

![Создание кластера](./images/lab1-9.png)  
*Рисунок 9 – Создание кластера*

#### 4. Запуск и проверка сервера
Сервер запущен с помощью `pg_ctl` с указанием файла для логов. Выполнено подключение через `psql` на нестандартном порту и выполнен запрос. После тестирования сервер остановлен. (Рис.10-11)

![Запуск сервера](./images/lab1-10.png)  
*Рисунок 10 – Запуск сервера с помощью pg_ctl*

![Подключение к серверу](./images/lab1-11.png)  
*Рисунок 11 – Подключение к новому серверу на нестандартном порту и остановка сервера*

---

## Теоретическая часть

### Зачем нужны контрольные суммы данных в PostgreSQL?
Контрольные суммы данных — это механизм защиты от «тихих» повреждений, когда информация на диске искажается без явных ошибок со стороны ОС.  
PostgreSQL рассчитывает контрольную сумму для каждой 8KB страницы при записи и проверяет её при чтении. Несовпадение суммы означает повреждение данных — сервер сообщает об ошибке и предотвращает использование некорректной информации.  

Этот механизм особенно важен для продакшн-систем, так как позволяет выявлять сбои оборудования (дисков, памяти, контроллеров) на раннем этапе.  
Недостатки: небольшое снижение производительности (3–5%) и невозможность включения механизма на уже работающем кластере (только при инициализации).

### Сравнение способов установки PostgreSQL

**Установка из пакетов:**
- Простота и скорость (1–3 минуты).
- Автоматическое создание кластера.
- Интеграция с ОС и системными сервисами.
- Удобные обновления через пакетный менеджер.
- Время до первого подключения: 5–10 минут.

**Сборка из исходников:**
- Более трудоемкий процесс (45–90 минут).
- Требует установки инструментов и ручной настройки.
- Дает гибкость в конфигурации (порт, каталог, модули).
- Оптимизация под конкретное оборудование.
- Полезна для глубокого изучения и специфических задач.

---

## Выводы

В ходе выполнения лабораторной работы были освоены два подхода к установке PostgreSQL и базовые приемы администрирования.  

Пакетная установка показала простоту и надежность, что делает её оптимальной для большинства продакшн-сценариев. Сборка из исходных кодов оказалась более сложной и затратной по времени, но дала гибкость конфигурации и лучшее понимание архитектуры PostgreSQL.  

Практика работы с контрольными суммами подтвердила их значимость для обеспечения целостности данных. Освоены утилиты `pg_ctl`, `pg_checksums`, `initdb` и `psql`, которые являются основой для дальнейшего изучения администрирования PostgreSQL.  

Выбор метода установки зависит от задач:  
- для стандартных сценариев рекомендуется установка из пакетов;  
- для специализированных задач или учебных целей целесообразна сборка из исходников.
